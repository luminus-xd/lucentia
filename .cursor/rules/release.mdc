---
description: リリースノートを作成する際に利用する
globs: 
alwaysApply: false
---
# リリースノート作成ガイドライン

## 概要

このドキュメントでは、一貫性のあるリリースノートを作成するためのガイドラインを提供します。リリースノートは、ユーザーと開発者の両方に価値ある情報を提供する重要なドキュメントです。

## 基本構造

リリースノートは以下のセクションから構成されます：

1. **改善点** (🛠️)
2. **技術的変更** (🔧)
3. **その他の変更** (📝)
4. **インストール方法** (🚀)
5. **Changelog リンク**

## 各セクションの詳細

### 🛠️ 改善点

ユーザーが直接体験できる改善点や新機能を記載します。

- 各改善点は**太字**のカテゴリタイトルで始まる
- その下に箇条書きで具体的な改善内容を記載
- ユーザー視点での価値を明確に説明する
- 技術的な詳細よりも機能面の説明を優先する

### 🔧 技術的変更

開発者や技術的な背景に関心のあるユーザー向けの変更点を記載します。

- 各変更は**太字**のカテゴリタイトルで始まる
- その下に箇条書きで具体的な技術変更内容を記載
- パフォーマンス、セキュリティ、アーキテクチャに関する変更を含める
- 適度な技術的詳細を提供する

### 📝 その他の変更

前述のカテゴリに当てはまらない小さな変更や改善点を記載します。

- 簡潔な箇条書きで記載
- UI変更、ドキュメント改善、細かなバグ修正など
- 重要度は低いが言及する価値のある変更を含める

### 🚀 インストール方法

最新バージョンのインストール方法を簡潔に記載します。

- 標準的なインストール手順を記載
- 必要な場合は、プラットフォーム別の指示を提供

### Changelog リンク

前バージョンからの全変更履歴へのリンクを提供します。

- 標準フォーマット: `**Full Changelog**: https://github.com/[owner]/[repo]/compare/[前バージョン]...[現バージョン]`

## 記述スタイル

- 簡潔で明確な文章を使用する
- 技術用語は必要な場合にのみ使用し、可能な限り説明を付ける
- 一貫性のある文体と箇条書きスタイルを維持する
- 絵文字を適切に使用して視覚的な区別を強調する

## 例

```markdown
## 🛠️ 改善点

- **yt-dlpバイナリ管理の改善**
  - バージョン確認機能の追加
  - 正常に動作しないバイナリの自動再ダウンロード機能

- **エラーハンドリングの強化**
  - バイナリダウンロード時のエラーメッセージ改善
  - 詳細なログ出力によるトラブルシューティングの容易化

## 🔧 技術的変更

- **Rustコードの最適化**
  - バージョン確認処理の追加
  - Unix環境での権限設定処理の信頼性向上
  - エラーログの詳細化

- **バイナリ管理システム**
  - 古いバイナリの自動削除と再ダウンロード
  - 障害発生時のフォールバック処理の追加

## 📝 その他の変更

- デバッグログの強化
- エラーメッセージの日本語対応

## 🚀 インストール方法

リリースページから、お使いのプラットフォーム向けのインストーラーをダウンロードしてください。

**Full Changelog**: https://github.com/luminus-xd/lucentia/compare/v1.1...v1.1.1
```

## 注意事項

- 変更がない場合はセクションを省略する
- 重要な変更は最初に記載する
- ユーザーへの影響が大きい変更は強調する
- 破壊的変更がある場合は明確に警告する
