---
description: 
globs: 
alwaysApply: true
---
# コーディングに関するAIエージェントの規定

## チェック

- 自動チェックは不要
- ブラウザテストはユーザーにチェックを促す

## 実装方式

コード生成にあたって細かい実装方針を記す。

### 全般

- Linterの警告は数回トライして直せない場合は、無効化するかどうかユーザーに尋ねる
- cSpellの警告は単純なスペルミスは修正し、固有名詞と思われるものであれば`cspell.json`に単語を追加する

### HTML/Pug

- ページ遷移しない（リンクでない）インタラクションにa要素を使わない
- WAI-ARIAを用いる必要があるときは適宜ユーザーに確認する
  - WAI-ARIAを必要とする基準はARIA Authoring Practice Guideのコンポーネント
  - APG以外に必要とする例外
    - aria-currentはパンくず、フォームのプロセスなどに用いる
- data属性はJSでインタラクティブな状態変化をつけるときのみに用いて静的なスタイルを適用しない
- 改行でbr要素使わず、span要素とdisplay:block/inline-blockを活用する
  - 詩・ポエムは除く

### CSS/SCSS

- ウィンドウ幅がどの幅でも横スクロールを発生させない
- data属性はJSでインタラクティブな状態変化をつけるときのみに用いて静的なスタイルを適用しない
- 色を使用する場合は、:rootにカスタムプロパティを定義して使用する
  - 参照する際に `var(--primary-color, #000)` のようなフォールバック用の第2引数は用いない
- Stylelintの警告について
  - **次の警告は無視する**
    - プロパティの順番に関する警告
    - 論理プロパティに関する警告
    - カラーフォーマットに関する警告

### JavaScript/TypeScript

- TypeScriptで書く
- if/elseifよりもswitch/caseやハッシュマップを用いる
- なるべく早期returnを用いてネストを深くしない
- 関数はひとつのファイルに切り出す
- 純粋関数はテストコードを書くかどうかユーザーに尋ねる
- テストはvitestを用いる
- テストファイルは `*.spec.ts` という命名にする
- 一般的なデザインパターンに当てはまらないならclassは用いずに関数ベースの実装をする
- JSDocsは日本語で書く
- `<script type="module">`を用いてモジュール化しているので`DOMContentLoaded`イベントは**不要**
- document.querySelectorなどで要素の型をジェネリクスで受け取る場合、`HTMLElement`型を用いてよい
  - HTMLやCSSクラスと照らし合わせて、セレクタの対象要素の種類が明らかな場合は`HTMLInputElement`型などを用いてよい
- `any`型に関して
  - `any`型を定義する場合は`unknown`型に置き換える
  - モジュールの型定義がない場合は、暗黙の`any`型として実装するが、プロパティやメソッドを利用する際に明示的に型を指定する
- 型エラーに関して
  - 定義されていないプロパティやメソッドを利用する際には、型エラーが発生するが、その場合はユーザーに確認を取り以下のいずれかの対応を取る
    - `@ts-ignore`を利用してエラーを無視する
    - `in`演算子を利用してプロパティの存在を確認する
    - 型を新たに定義してエラーを回避する
- ESLintの警告はWarningレベルでも修正する

